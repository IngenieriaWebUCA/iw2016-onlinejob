// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.onlinejob.domain;

import es.uca.iw.onlinejob.domain.Usuario;
import es.uca.iw.onlinejob.domain.UsuarioDataOnDemand;
import es.uca.iw.onlinejob.reference.Rol;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UsuarioDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UsuarioDataOnDemand: @Component;
    
    private Random UsuarioDataOnDemand.rnd = new SecureRandom();
    
    private List<Usuario> UsuarioDataOnDemand.data;
    
    public Usuario UsuarioDataOnDemand.getNewTransientUsuario(int index) {
        Usuario obj = new Usuario();
        setEmail(obj, index);
        setEnabled(obj, index);
        setFechaRegistro(obj, index);
        setPassword(obj, index);
        setRol(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void UsuarioDataOnDemand.setEmail(Usuario obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 32) {
            email = email.substring(0, 32);
        }
        obj.setEmail(email);
    }
    
    public void UsuarioDataOnDemand.setEnabled(Usuario obj, int index) {
        String enabled = "e" + index;
        if (enabled.length() > 2) {
            enabled = enabled.substring(0, 2);
        }
        obj.setEnabled(enabled);
    }
    
    public void UsuarioDataOnDemand.setFechaRegistro(Usuario obj, int index) {
        Date fechaRegistro = new Date(new Date().getTime() - 10000000L);
        obj.setFechaRegistro(fechaRegistro);
    }
    
    public void UsuarioDataOnDemand.setPassword(Usuario obj, int index) {
        String password = "password_" + index;
        if (password.length() > 32) {
            password = password.substring(0, 32);
        }
        obj.setPassword(password);
    }
    
    public void UsuarioDataOnDemand.setRol(Usuario obj, int index) {
        Rol rol = Rol.class.getEnumConstants()[0];
        obj.setRol(rol);
    }
    
    public void UsuarioDataOnDemand.setUsername(Usuario obj, int index) {
        String username = "username_" + index;
        if (username.length() > 32) {
            username = username.substring(0, 32);
        }
        obj.setUsername(username);
    }
    
    public Usuario UsuarioDataOnDemand.getSpecificUsuario(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Usuario obj = data.get(index);
        Long id = obj.getId();
        return Usuario.findUsuario(id);
    }
    
    public Usuario UsuarioDataOnDemand.getRandomUsuario() {
        init();
        Usuario obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Usuario.findUsuario(id);
    }
    
    public boolean UsuarioDataOnDemand.modifyUsuario(Usuario obj) {
        return false;
    }
    
    public void UsuarioDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Usuario.findUsuarioEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Usuario' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Usuario>();
        for (int i = 0; i < 10; i++) {
            Usuario obj = getNewTransientUsuario(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
